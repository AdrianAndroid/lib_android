// Signature format: 4.0
package androidx.slice {

  @RequiresApi(19) public class SliceMetadata {
    method public static androidx.slice.SliceMetadata from(android.content.Context?, androidx.slice.Slice);
    method public long getExpiry();
    method public int getHeaderType();
    method public android.os.Bundle getHostExtras();
    method public android.app.PendingIntent? getInputRangeAction();
    method public long getLastUpdatedTime();
    method public int getLoadingState();
    method public androidx.slice.core.SliceAction? getPrimaryAction();
    method public androidx.core.util.Pair<java.lang.Integer!,java.lang.Integer!>? getRange();
    method public int getRangeValue();
    method public java.util.List<androidx.slice.core.SliceAction!>? getSliceActions();
    method public java.util.List<java.lang.String!>? getSliceKeywords();
    method public CharSequence? getSubtitle();
    method public CharSequence? getSummary();
    method public CharSequence? getTitle();
    method public java.util.List<androidx.slice.core.SliceAction!>! getToggles();
    method public boolean hasLargeMode();
    method public boolean isCachedSlice();
    method public boolean isErrorSlice();
    method public boolean isPermissionSlice();
    method public boolean isSelection();
    method public boolean sendInputRangeAction(int) throws android.app.PendingIntent.CanceledException;
    method public boolean sendToggleAction(androidx.slice.core.SliceAction!, boolean) throws android.app.PendingIntent.CanceledException;
    field public static final int LOADED_ALL = 2; // 0x2
    field public static final int LOADED_NONE = 0; // 0x0
    field public static final int LOADED_PARTIAL = 1; // 0x1
  }

  @RequiresApi(19) public class SliceStructure {
    ctor public SliceStructure(androidx.slice.Slice!);
  }

  @RequiresApi(19) public class SliceUtils {
    method public static androidx.slice.Slice parseSlice(android.content.Context, java.io.InputStream, String, androidx.slice.SliceUtils.SliceActionListener) throws java.io.IOException, androidx.slice.SliceUtils.SliceParseException;
    method public static void serializeSlice(androidx.slice.Slice, android.content.Context, java.io.OutputStream, androidx.slice.SliceUtils.SerializeOptions) throws java.lang.IllegalArgumentException;
    method public static androidx.slice.Slice stripSlice(androidx.slice.Slice, int, boolean);
  }

  public static class SliceUtils.SerializeOptions {
    ctor public SliceUtils.SerializeOptions();
    method public androidx.slice.SliceUtils.SerializeOptions! setActionMode(int);
    method public androidx.slice.SliceUtils.SerializeOptions! setImageConversionFormat(android.graphics.Bitmap.CompressFormat!, int);
    method public androidx.slice.SliceUtils.SerializeOptions! setImageMode(int);
    method public androidx.slice.SliceUtils.SerializeOptions! setMaxImageHeight(int);
    method public androidx.slice.SliceUtils.SerializeOptions! setMaxImageWidth(int);
    field public static final int MODE_CONVERT = 2; // 0x2
    field public static final int MODE_REMOVE = 1; // 0x1
    field public static final int MODE_THROW = 0; // 0x0
  }

  public static interface SliceUtils.SliceActionListener {
    method public void onSliceAction(android.net.Uri!, android.content.Context!, android.content.Intent!);
  }

  public static class SliceUtils.SliceParseException extends java.lang.Exception {
  }

  @RequiresApi(19) public abstract class SliceViewManager {
    method public abstract androidx.slice.Slice? bindSlice(android.net.Uri);
    method public abstract androidx.slice.Slice? bindSlice(android.content.Intent);
    method public static androidx.slice.SliceViewManager getInstance(android.content.Context);
    method @WorkerThread public abstract java.util.Collection<android.net.Uri!> getSliceDescendants(android.net.Uri);
    method public abstract android.net.Uri? mapIntentToUri(android.content.Intent);
    method public abstract void pinSlice(android.net.Uri);
    method public abstract void registerSliceCallback(android.net.Uri, androidx.slice.SliceViewManager.SliceCallback);
    method public abstract void registerSliceCallback(android.net.Uri, java.util.concurrent.Executor, androidx.slice.SliceViewManager.SliceCallback);
    method public abstract void unpinSlice(android.net.Uri);
    method public abstract void unregisterSliceCallback(android.net.Uri, androidx.slice.SliceViewManager.SliceCallback);
  }

  public static interface SliceViewManager.SliceCallback {
    method public void onSliceUpdated(androidx.slice.Slice?);
  }

}

package androidx.slice.widget {

  @RequiresApi(19) public class EventInfo {
    ctor public EventInfo(int, int, int, int);
    method public void setPosition(int, int, int);
    field public static final int ACTION_TYPE_BUTTON = 1; // 0x1
    field public static final int ACTION_TYPE_CONTENT = 3; // 0x3
    field public static final int ACTION_TYPE_SEE_MORE = 4; // 0x4
    field public static final int ACTION_TYPE_SELECTION = 5; // 0x5
    field public static final int ACTION_TYPE_SLIDER = 2; // 0x2
    field public static final int ACTION_TYPE_TOGGLE = 0; // 0x0
    field public static final int POSITION_CELL = 2; // 0x2
    field public static final int POSITION_END = 1; // 0x1
    field public static final int POSITION_START = 0; // 0x0
    field public static final int ROW_TYPE_GRID = 1; // 0x1
    field public static final int ROW_TYPE_LIST = 0; // 0x0
    field public static final int ROW_TYPE_MESSAGING = 2; // 0x2
    field public static final int ROW_TYPE_PROGRESS = 5; // 0x5
    field public static final int ROW_TYPE_SELECTION = 6; // 0x6
    field public static final int ROW_TYPE_SHORTCUT = -1; // 0xffffffff
    field public static final int ROW_TYPE_SLIDER = 4; // 0x4
    field public static final int ROW_TYPE_TOGGLE = 3; // 0x3
    field public static final int STATE_OFF = 0; // 0x0
    field public static final int STATE_ON = 1; // 0x1
    field public int actionCount;
    field public int actionIndex;
    field public int actionPosition;
    field public int actionType;
    field public int rowIndex;
    field public int rowTemplateType;
    field public int sliceMode;
    field public int state;
  }

  @RequiresApi(19) public class GridContent extends androidx.slice.widget.SliceContent {
    method public android.graphics.Point getFirstImageSize(android.content.Context);
    method public boolean isValid();
  }

  @RequiresApi(19) public class GridRowView extends androidx.slice.widget.SliceChildView implements android.view.View.OnClickListener android.view.View.OnTouchListener {
    ctor public GridRowView(android.content.Context);
    ctor public GridRowView(android.content.Context, android.util.AttributeSet?);
    method protected boolean addImageItem(androidx.slice.SliceItem, androidx.slice.SliceItem?, int, android.view.ViewGroup, boolean);
    method protected int getExtraBottomPadding();
    method protected int getExtraTopPadding();
    method protected int getMaxCells();
    method protected int getTitleTextLayout();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public void onClick(android.view.View);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public boolean onTouch(android.view.View, android.view.MotionEvent);
    method protected void populateViews();
    method public void resetView();
    method protected boolean scheduleMaxCellsUpdate();
  }

  public interface RowStyleFactory {
    method @StyleRes public int getRowStyleRes(androidx.slice.SliceItem);
  }

  @RequiresApi(19) public class RowView extends androidx.slice.widget.SliceChildView implements android.widget.AdapterView.OnItemSelectedListener android.view.View.OnClickListener {
    ctor public RowView(android.content.Context);
    method protected java.util.List<java.lang.String!> getEndItemKeys();
    method protected androidx.slice.SliceItem? getPrimaryActionItem();
    method protected String? getPrimaryActionKey();
    method public void onClick(android.view.View);
    method public void onItemSelected(android.widget.AdapterView<?>, android.view.View, int, long);
    method public void onNothingSelected(android.widget.AdapterView<?>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public void resetView();
  }

  @RequiresApi(19) public class SliceAdapter extends androidx.recyclerview.widget.RecyclerView.Adapter<androidx.slice.widget.SliceAdapter.SliceViewHolder> {
    ctor public SliceAdapter(android.content.Context);
    method public androidx.slice.widget.GridRowView getGridRowView();
    method public int getItemCount();
    method public androidx.slice.widget.RowView getRowView();
    method public void onBindViewHolder(androidx.slice.widget.SliceAdapter.SliceViewHolder, int);
    method public androidx.slice.widget.SliceAdapter.SliceViewHolder onCreateViewHolder(android.view.ViewGroup, int);
  }

  @RequiresApi(19) public abstract class SliceChildView extends android.widget.FrameLayout {
    ctor public SliceChildView(android.content.Context);
    ctor public SliceChildView(android.content.Context, android.util.AttributeSet?);
    method public abstract void resetView();
    method public void setSliceItem(androidx.slice.widget.SliceContent?, boolean, int, int, androidx.slice.widget.SliceView.OnSliceActionListener?);
  }

  @RequiresApi(19) public class SliceContent {
    ctor public SliceContent(androidx.slice.Slice?);
  }

  @RequiresApi(19) public final class SliceLiveData {
    method public static androidx.slice.widget.SliceLiveData.CachedSliceLiveData fromCachedSlice(android.content.Context, java.io.InputStream, androidx.slice.widget.SliceLiveData.OnErrorListener!);
    method public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromIntent(android.content.Context, android.content.Intent);
    method public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromIntent(android.content.Context, android.content.Intent, androidx.slice.widget.SliceLiveData.OnErrorListener?);
    method public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromStream(android.content.Context, java.io.InputStream, androidx.slice.widget.SliceLiveData.OnErrorListener!);
    method public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromUri(android.content.Context, android.net.Uri);
    method public static androidx.lifecycle.LiveData<androidx.slice.Slice!> fromUri(android.content.Context, android.net.Uri, androidx.slice.widget.SliceLiveData.OnErrorListener?);
  }

  public static class SliceLiveData.CachedSliceLiveData extends androidx.lifecycle.LiveData<androidx.slice.Slice> {
    method public void goLive();
    method public void parseStream();
  }

  public static interface SliceLiveData.OnErrorListener {
    method public void onSliceError(@androidx.slice.widget.SliceLiveData.OnErrorListener.ErrorType int, Throwable?);
    field public static final int ERROR_INVALID_INPUT = 3; // 0x3
    field public static final int ERROR_SLICE_NO_LONGER_PRESENT = 2; // 0x2
    field public static final int ERROR_STRUCTURE_CHANGED = 1; // 0x1
    field public static final int ERROR_UNKNOWN = 0; // 0x0
  }

  @IntDef({androidx.slice.widget.SliceLiveData.OnErrorListener.ERROR_UNKNOWN, androidx.slice.widget.SliceLiveData.OnErrorListener.ERROR_STRUCTURE_CHANGED, androidx.slice.widget.SliceLiveData.OnErrorListener.ERROR_SLICE_NO_LONGER_PRESENT, androidx.slice.widget.SliceLiveData.OnErrorListener.ERROR_INVALID_INPUT}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SliceLiveData.OnErrorListener.ErrorType {
  }

  @RequiresApi(19) public class SliceView extends android.view.ViewGroup implements androidx.lifecycle.Observer<androidx.slice.Slice> android.view.View.OnClickListener {
    ctor public SliceView(android.content.Context!);
    ctor public SliceView(android.content.Context!, android.util.AttributeSet?);
    ctor public SliceView(android.content.Context!, android.util.AttributeSet?, int);
    ctor @RequiresApi(21) public SliceView(android.content.Context!, android.util.AttributeSet!, int, int);
    method protected void configureViewPolicy(int);
    method public int getHiddenItemCount();
    method public int getMode();
    method public androidx.slice.Slice? getSlice();
    method public java.util.List<androidx.slice.core.SliceAction!>? getSliceActions();
    method public boolean isScrollable();
    method public void onChanged(androidx.slice.Slice?);
    method public void onClick(android.view.View!);
    method public void setAccentColor(@ColorInt int);
    method public void setCurrentView(androidx.slice.widget.SliceChildView);
    method public void setMode(int);
    method public void setOnSliceActionListener(androidx.slice.widget.SliceView.OnSliceActionListener?);
    method public void setRowStyleFactory(androidx.slice.widget.RowStyleFactory?);
    method public void setScrollable(boolean);
    method public void setShowActionDividers(boolean);
    method public void setShowHeaderDivider(boolean);
    method public void setShowTitleItems(boolean);
    method public void setSlice(androidx.slice.Slice?);
    method public void setSliceActions(java.util.List<androidx.slice.core.SliceAction!>?);
    field public static final int MODE_LARGE = 2; // 0x2
    field public static final int MODE_SHORTCUT = 3; // 0x3
    field public static final int MODE_SMALL = 1; // 0x1
  }

  public static interface SliceView.OnSliceActionListener {
    method public void onSliceAction(androidx.slice.widget.EventInfo, androidx.slice.SliceItem);
  }

  @RequiresApi(19) public class TemplateView extends androidx.slice.widget.SliceChildView {
    ctor public TemplateView(android.content.Context);
    method public void onAttachedToWindow();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public void resetView();
    method public void setAdapter(androidx.slice.widget.SliceAdapter);
  }

}

