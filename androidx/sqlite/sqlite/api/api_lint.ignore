// Baseline format: 1.0
AcronymName: androidx.sqlite.db.SimpleSQLiteQuery:
    Acronyms should not be capitalized in class names: was `SimpleSQLiteQuery`, should this be `SimpleSqLiteQuery`?
AcronymName: androidx.sqlite.db.SupportSQLiteDatabase:
    Acronyms should not be capitalized in class names: was `SupportSQLiteDatabase`, should this be `SupportSqLiteDatabase`?
AcronymName: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String):
    Acronyms should not be capitalized in method names: was `execSQL`, should this be `execSql`?
AcronymName: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String, Object[]):
    Acronyms should not be capitalized in method names: was `execSQL`, should this be `execSql`?
AcronymName: androidx.sqlite.db.SupportSQLiteOpenHelper:
    Acronyms should not be capitalized in class names: was `SupportSQLiteOpenHelper`, should this be `SupportSqLiteOpenHelper`?
AcronymName: androidx.sqlite.db.SupportSQLiteProgram:
    Acronyms should not be capitalized in class names: was `SupportSQLiteProgram`, should this be `SupportSqLiteProgram`?
AcronymName: androidx.sqlite.db.SupportSQLiteQuery:
    Acronyms should not be capitalized in class names: was `SupportSQLiteQuery`, should this be `SupportSqLiteQuery`?
AcronymName: androidx.sqlite.db.SupportSQLiteQueryBuilder:
    Acronyms should not be capitalized in class names: was `SupportSQLiteQueryBuilder`, should this be `SupportSqLiteQueryBuilder`?
AcronymName: androidx.sqlite.db.SupportSQLiteStatement:
    Acronyms should not be capitalized in class names: was `SupportSQLiteStatement`, should this be `SupportSqLiteStatement`?


ArrayReturn: androidx.sqlite.db.SimpleSQLiteQuery#SimpleSQLiteQuery(String, Object[]) parameter #1:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SimpleSQLiteQuery#bind(androidx.sqlite.db.SupportSQLiteProgram, Object[]) parameter #1:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SupportSQLiteDatabase#delete(String, String, Object[]) parameter #2:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String, Object[]) parameter #1:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SupportSQLiteDatabase#query(String, Object[]) parameter #1:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SupportSQLiteDatabase#update(String, int, android.content.ContentValues, String, Object[]) parameter #4:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`
ArrayReturn: androidx.sqlite.db.SupportSQLiteQueryBuilder#selection(String, Object[]) parameter #1:
    Method parameter should be Collection<Object> (or subclass) instead of raw array; was `java.lang.Object[]`


BuilderSetStyle: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder#callback(androidx.sqlite.db.SupportSQLiteOpenHelper.Callback):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder.callback(androidx.sqlite.db.SupportSQLiteOpenHelper.Callback)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder#name(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder.name(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder#noBackupDirectory(boolean):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder.noBackupDirectory(boolean)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#builder(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.builder(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#columns(String[]):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.columns(String[])
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#create():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.create()
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#distinct():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.distinct()
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#groupBy(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.groupBy(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#having(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.having(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#limit(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.limit(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#orderBy(String):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.orderBy(String)
BuilderSetStyle: androidx.sqlite.db.SupportSQLiteQueryBuilder#selection(String, Object[]):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.sqlite.db.SupportSQLiteQueryBuilder.selection(String,Object[])


ExecutorRegistration: androidx.sqlite.db.SupportSQLiteDatabase#beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener):
    Registration methods should have overload that accepts delivery Executor: `beginTransactionWithListener`
ExecutorRegistration: androidx.sqlite.db.SupportSQLiteDatabase#beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener):
    Registration methods should have overload that accepts delivery Executor: `beginTransactionWithListenerNonExclusive`
ExecutorRegistration: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder#callback(androidx.sqlite.db.SupportSQLiteOpenHelper.Callback):
    Registration methods should have overload that accepts delivery Executor: `callback`


MissingBuildMethod: androidx.sqlite.db.SupportSQLiteQueryBuilder:
    androidx.sqlite.db.SupportSQLiteQueryBuilder does not declare a `build()` method, but builder classes are expected to


MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#SimpleSQLiteQuery(String) parameter #0:
    Missing nullability on parameter `query` in method `SimpleSQLiteQuery`
MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#SimpleSQLiteQuery(String, Object[]) parameter #0:
    Missing nullability on parameter `query` in method `SimpleSQLiteQuery`
MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#bind(androidx.sqlite.db.SupportSQLiteProgram, Object[]) parameter #0:
    Missing nullability on parameter `statement` in method `bind`
MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#bind(androidx.sqlite.db.SupportSQLiteProgram, Object[]) parameter #1:
    Missing nullability on parameter `bindArgs` in method `bind`
MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#bindTo(androidx.sqlite.db.SupportSQLiteProgram) parameter #0:
    Missing nullability on parameter `statement` in method `bindTo`
MissingNullability: androidx.sqlite.db.SimpleSQLiteQuery#getSql():
    Missing nullability on method `getSql` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener) parameter #0:
    Missing nullability on parameter `transactionListener` in method `beginTransactionWithListener`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener) parameter #0:
    Missing nullability on parameter `transactionListener` in method `beginTransactionWithListenerNonExclusive`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#compileStatement(String):
    Missing nullability on method `compileStatement` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#compileStatement(String) parameter #0:
    Missing nullability on parameter `sql` in method `compileStatement`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#delete(String, String, Object[]) parameter #0:
    Missing nullability on parameter `table` in method `delete`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#delete(String, String, Object[]) parameter #1:
    Missing nullability on parameter `whereClause` in method `delete`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#delete(String, String, Object[]) parameter #2:
    Missing nullability on parameter `whereArgs` in method `delete`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String) parameter #0:
    Missing nullability on parameter `sql` in method `execSQL`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String, Object[]) parameter #0:
    Missing nullability on parameter `sql` in method `execSQL`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#execSQL(String, Object[]) parameter #1:
    Missing nullability on parameter `bindArgs` in method `execSQL`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#getAttachedDbs():
    Missing nullability on method `getAttachedDbs` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#getPath():
    Missing nullability on method `getPath` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#insert(String, int, android.content.ContentValues) parameter #0:
    Missing nullability on parameter `table` in method `insert`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#insert(String, int, android.content.ContentValues) parameter #2:
    Missing nullability on parameter `values` in method `insert`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(String):
    Missing nullability on method `query` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(String) parameter #0:
    Missing nullability on parameter `query` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(String, Object[]):
    Missing nullability on method `query` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(String, Object[]) parameter #0:
    Missing nullability on parameter `query` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(String, Object[]) parameter #1:
    Missing nullability on parameter `bindArgs` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(androidx.sqlite.db.SupportSQLiteQuery):
    Missing nullability on method `query` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(androidx.sqlite.db.SupportSQLiteQuery) parameter #0:
    Missing nullability on parameter `query` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal):
    Missing nullability on method `query` return
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal) parameter #0:
    Missing nullability on parameter `query` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#query(androidx.sqlite.db.SupportSQLiteQuery, android.os.CancellationSignal) parameter #1:
    Missing nullability on parameter `cancellationSignal` in method `query`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#setLocale(java.util.Locale) parameter #0:
    Missing nullability on parameter `locale` in method `setLocale`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#update(String, int, android.content.ContentValues, String, Object[]) parameter #0:
    Missing nullability on parameter `table` in method `update`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#update(String, int, android.content.ContentValues, String, Object[]) parameter #2:
    Missing nullability on parameter `values` in method `update`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#update(String, int, android.content.ContentValues, String, Object[]) parameter #3:
    Missing nullability on parameter `whereClause` in method `update`
MissingNullability: androidx.sqlite.db.SupportSQLiteDatabase#update(String, int, android.content.ContentValues, String, Object[]) parameter #4:
    Missing nullability on parameter `whereArgs` in method `update`
MissingNullability: androidx.sqlite.db.SupportSQLiteOpenHelper#getReadableDatabase():
    Missing nullability on method `getReadableDatabase` return
MissingNullability: androidx.sqlite.db.SupportSQLiteOpenHelper#getWritableDatabase():
    Missing nullability on method `getWritableDatabase` return
MissingNullability: androidx.sqlite.db.SupportSQLiteProgram#bindBlob(int, byte[]) parameter #1:
    Missing nullability on parameter `value` in method `bindBlob`
MissingNullability: androidx.sqlite.db.SupportSQLiteProgram#bindString(int, String) parameter #1:
    Missing nullability on parameter `value` in method `bindString`
MissingNullability: androidx.sqlite.db.SupportSQLiteQuery#bindTo(androidx.sqlite.db.SupportSQLiteProgram) parameter #0:
    Missing nullability on parameter `statement` in method `bindTo`
MissingNullability: androidx.sqlite.db.SupportSQLiteQuery#getSql():
    Missing nullability on method `getSql` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#builder(String):
    Missing nullability on method `builder` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#builder(String) parameter #0:
    Missing nullability on parameter `tableName` in method `builder`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#columns(String[]):
    Missing nullability on method `columns` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#columns(String[]) parameter #0:
    Missing nullability on parameter `columns` in method `columns`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#create():
    Missing nullability on method `create` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#distinct():
    Missing nullability on method `distinct` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#groupBy(String):
    Missing nullability on method `groupBy` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#groupBy(String) parameter #0:
    Missing nullability on parameter `groupBy` in method `groupBy`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#having(String):
    Missing nullability on method `having` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#having(String) parameter #0:
    Missing nullability on parameter `having` in method `having`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#limit(String):
    Missing nullability on method `limit` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#limit(String) parameter #0:
    Missing nullability on parameter `limit` in method `limit`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#orderBy(String):
    Missing nullability on method `orderBy` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#orderBy(String) parameter #0:
    Missing nullability on parameter `orderBy` in method `orderBy`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#selection(String, Object[]):
    Missing nullability on method `selection` return
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#selection(String, Object[]) parameter #0:
    Missing nullability on parameter `selection` in method `selection`
MissingNullability: androidx.sqlite.db.SupportSQLiteQueryBuilder#selection(String, Object[]) parameter #1:
    Missing nullability on parameter `bindArgs` in method `selection`
MissingNullability: androidx.sqlite.db.SupportSQLiteStatement#simpleQueryForString():
    Missing nullability on method `simpleQueryForString` return


StaticFinalBuilder: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder:
    Builder must be final: androidx.sqlite.db.SupportSQLiteOpenHelper.Configuration.Builder


TopLevelBuilder: androidx.sqlite.db.SupportSQLiteQueryBuilder:
    Builder should be defined as inner class: androidx.sqlite.db.SupportSQLiteQueryBuilder
