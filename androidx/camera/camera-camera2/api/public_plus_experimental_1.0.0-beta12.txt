// Signature format: 4.0
package androidx.camera.camera2 {

  public final class Camera2Config {
    method public static androidx.camera.core.CameraXConfig defaultConfig();
  }

}

package androidx.camera.camera2.interop {

  @androidx.camera.camera2.interop.ExperimentalCamera2Interop public final class Camera2CameraControl {
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> addCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions);
    method public static androidx.camera.camera2.interop.Camera2CameraControl from(androidx.camera.core.CameraControl);
    method public androidx.camera.camera2.interop.CaptureRequestOptions getCaptureRequestOptions();
    method public com.google.common.util.concurrent.ListenableFuture<java.lang.Void!> setCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions);
  }

  @androidx.camera.camera2.interop.ExperimentalCamera2Interop public final class Camera2CameraFilter {
    method public static androidx.camera.core.CameraFilter createCameraFilter(androidx.camera.camera2.interop.Camera2CameraFilter.Camera2Filter);
  }

  public static interface Camera2CameraFilter.Camera2Filter {
    method public java.util.List<androidx.camera.camera2.interop.Camera2CameraInfo!> filter(java.util.List<androidx.camera.camera2.interop.Camera2CameraInfo!>);
  }

  @androidx.camera.camera2.interop.ExperimentalCamera2Interop public final class Camera2CameraInfo {
    method public static androidx.camera.camera2.interop.Camera2CameraInfo from(androidx.camera.core.CameraInfo);
    method public <T> T? getCameraCharacteristic(android.hardware.camera2.CameraCharacteristics.Key<T!>);
    method public String getCameraId();
  }

  @androidx.camera.camera2.interop.ExperimentalCamera2Interop public final class Camera2Interop {
  }

  public static final class Camera2Interop.Extender<T> {
    ctor public Camera2Interop.Extender(androidx.camera.core.ExtendableBuilder<T!>);
    method public <ValueT> androidx.camera.camera2.interop.Camera2Interop.Extender<T!> setCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>, ValueT);
    method public androidx.camera.camera2.interop.Camera2Interop.Extender<T!> setDeviceStateCallback(android.hardware.camera2.CameraDevice.StateCallback);
    method public androidx.camera.camera2.interop.Camera2Interop.Extender<T!> setSessionCaptureCallback(android.hardware.camera2.CameraCaptureSession.CaptureCallback);
    method public androidx.camera.camera2.interop.Camera2Interop.Extender<T!> setSessionStateCallback(android.hardware.camera2.CameraCaptureSession.StateCallback);
  }

  @androidx.camera.camera2.interop.ExperimentalCamera2Interop public class CaptureRequestOptions implements androidx.camera.core.impl.ReadableConfig {
    ctor public CaptureRequestOptions(androidx.camera.core.impl.Config);
    method public <ValueT> ValueT? getCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public androidx.camera.core.impl.Config getConfig();
  }

  public static final class CaptureRequestOptions.Builder implements androidx.camera.core.ExtendableBuilder<androidx.camera.camera2.interop.CaptureRequestOptions> {
    ctor public CaptureRequestOptions.Builder();
    method public androidx.camera.camera2.interop.CaptureRequestOptions build();
    method public <ValueT> androidx.camera.camera2.interop.CaptureRequestOptions.Builder clearCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public androidx.camera.core.impl.MutableConfig getMutableConfig();
    method public <ValueT> androidx.camera.camera2.interop.CaptureRequestOptions.Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest.Key<ValueT!>, ValueT);
  }

  @experimental.Experimental @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface ExperimentalCamera2Interop {
  }

}

