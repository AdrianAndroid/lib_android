/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.LibraryGroups
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("kotlin-android")
}

android {
    sourceSets {
        androidTest {
            // Shared TestingSerializer between test and androidTest
            kotlin.srcDirs += test.kotlin.srcDirs
        }
    }
}

dependencies {
    api(libs.kotlinStdlib)
    api(libs.kotlinCoroutinesCore)
    api("androidx.annotation:annotation:1.2.0")
    api(project(":datastore:datastore-core"))

    testImplementation(libs.junit)
    testImplementation(libs.kotlinCoroutinesTest)
    testImplementation(libs.truth)
    testImplementation(project(":internal-testutils-truth"))

    androidTestImplementation(libs.junit)
    androidTestImplementation(libs.kotlinCoroutinesTest)
    androidTestImplementation(libs.truth)
    androidTestImplementation(project(":internal-testutils-truth"))
    androidTestImplementation(libs.testRunner)
    androidTestImplementation(libs.testCore)
}

androidx {
    name = "Android DataStore"
    publish = Publish.SNAPSHOT_AND_RELEASE
    mavenGroup = LibraryGroups.DATASTORE
    inceptionYear = "2020"
    description = "Android DataStore - contains the underlying store used by each serialization " +
            "method along with components that require an Android dependency"
    legacyDisableKotlinStrictApiMode = true
}

// Allow usage of Kotlin's @OptIn.
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}
