// Signature format: 3.0
package androidx.datastore.preferences {

  public final class PreferenceDataStoreFactory {
    ctor public PreferenceDataStoreFactory();
    method public androidx.datastore.DataStore<androidx.datastore.preferences.core.Preferences> create(kotlin.jvm.functions.Function0<? extends java.io.File> produceFile, androidx.datastore.handlers.ReplaceFileCorruptionHandler<androidx.datastore.preferences.core.Preferences>? corruptionHandler = null, java.util.List<? extends kotlin.jvm.functions.Function0<? extends androidx.datastore.DataMigration<androidx.datastore.preferences.core.Preferences>>> migrationProducers = listOf(), kotlinx.coroutines.CoroutineScope scope = CoroutineScope(Dispatchers.IO + SupervisorJob()));
    method public androidx.datastore.DataStore<androidx.datastore.preferences.core.Preferences> create(kotlin.jvm.functions.Function0<? extends java.io.File> produceFile, androidx.datastore.handlers.ReplaceFileCorruptionHandler<androidx.datastore.preferences.core.Preferences>? corruptionHandler = null, java.util.List<? extends kotlin.jvm.functions.Function0<? extends androidx.datastore.DataMigration<androidx.datastore.preferences.core.Preferences>>> migrationProducers = listOf());
    method public androidx.datastore.DataStore<androidx.datastore.preferences.core.Preferences> create(kotlin.jvm.functions.Function0<? extends java.io.File> produceFile, androidx.datastore.handlers.ReplaceFileCorruptionHandler<androidx.datastore.preferences.core.Preferences>? corruptionHandler = null);
    method public androidx.datastore.DataStore<androidx.datastore.preferences.core.Preferences> create(kotlin.jvm.functions.Function0<? extends java.io.File> produceFile);
  }

  public final class Preferences {
    method public operator boolean contains(String key);
    method public static androidx.datastore.preferences.core.Preferences empty();
    method public java.util.Map<java.lang.String,java.lang.Object> getAll();
    method public boolean getBoolean(String key, boolean defaultValue);
    method public float getFloat(String key, float defaultValue);
    method public int getInt(String key, int defaultValue);
    method public long getLong(String key, long defaultValue);
    method public String getString(String key, String defaultValue);
    method public java.util.Set<java.lang.String> getStringSet(String key, java.util.Set<java.lang.String> defaultValue);
    method public androidx.datastore.preferences.core.Preferences.Builder toBuilder();
    field public static final androidx.datastore.preferences.core.Preferences.Companion Companion;
  }

  public static final class Preferences.Builder {
    ctor public Preferences.Builder();
    method public androidx.datastore.preferences.core.Preferences build();
    method public androidx.datastore.preferences.core.Preferences.Builder clear();
    method public androidx.datastore.preferences.core.Preferences.Builder remove(String key);
    method public androidx.datastore.preferences.core.Preferences.Builder setBoolean(String key, boolean newValue);
    method public androidx.datastore.preferences.core.Preferences.Builder setFloat(String key, float newValue);
    method public androidx.datastore.preferences.core.Preferences.Builder setInt(String key, int newValue);
    method public androidx.datastore.preferences.core.Preferences.Builder setLong(String key, long newValue);
    method public androidx.datastore.preferences.core.Preferences.Builder setString(String key, String newValue);
    method public androidx.datastore.preferences.core.Preferences.Builder setStringSet(String key, java.util.Set<java.lang.String> newValue);
  }

  public static final class Preferences.Companion {
    method public androidx.datastore.preferences.core.Preferences empty();
  }

  public final class SharedPreferencesToPreferencesKt {
    method public static kotlin.jvm.functions.Function0<androidx.datastore.DataMigration<androidx.datastore.preferences.core.Preferences>> SharedPreferencesMigration(android.content.Context context, String sharedPreferencesName, java.util.Set<java.lang.String>? keysToMigrate = SharedPreferencesToPreferences.MIGRATE_ALL_KEYS, boolean deleteEmptyPreferences = true);
  }

}

