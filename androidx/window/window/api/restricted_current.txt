// Signature format: 4.0
package androidx.window {

  public final class ActivityExtKt {
    method public static androidx.window.WindowInfoRepo windowInfoRepository(android.app.Activity);
  }

  public interface DisplayFeature {
    method public android.graphics.Rect getBounds();
    property public abstract android.graphics.Rect bounds;
  }

  public final class FoldingFeature implements androidx.window.DisplayFeature {
    ctor public FoldingFeature(android.graphics.Rect bounds, androidx.window.FoldingFeature.Type type, androidx.window.FoldingFeature.State state);
    method public android.graphics.Rect getBounds();
    method public androidx.window.FoldingFeature.OcclusionType getOcclusionType();
    method public androidx.window.FoldingFeature.Orientation getOrientation();
    method public androidx.window.FoldingFeature.State getState();
    method public boolean isSeparating();
    property public android.graphics.Rect bounds;
    property public final boolean isSeparating;
    property public final androidx.window.FoldingFeature.OcclusionType occlusionType;
    property public final androidx.window.FoldingFeature.Orientation orientation;
    property public final androidx.window.FoldingFeature.State state;
    field public static final androidx.window.FoldingFeature.Companion Companion;
    field public static final int OCCLUSION_FULL = 1; // 0x1
    field public static final int OCCLUSION_NONE = 0; // 0x0
    field public static final int ORIENTATION_HORIZONTAL = 1; // 0x1
    field public static final int ORIENTATION_VERTICAL = 0; // 0x0
    field public static final int STATE_FLAT = 1; // 0x1
    field public static final int STATE_HALF_OPENED = 2; // 0x2
    field public static final int TYPE_FOLD = 1; // 0x1
    field public static final int TYPE_HINGE = 2; // 0x2
  }

  public static final class FoldingFeature.Companion {
  }

  public static final class FoldingFeature.OcclusionType {
    field public static final androidx.window.FoldingFeature.OcclusionType.Companion Companion;
    field public static final androidx.window.FoldingFeature.OcclusionType FULL;
    field public static final androidx.window.FoldingFeature.OcclusionType NONE;
  }

  public static final class FoldingFeature.OcclusionType.Companion {
  }

  public static final class FoldingFeature.Orientation {
    field public static final androidx.window.FoldingFeature.Orientation.Companion Companion;
    field public static final androidx.window.FoldingFeature.Orientation HORIZONTAL;
    field public static final androidx.window.FoldingFeature.Orientation VERTICAL;
  }

  public static final class FoldingFeature.Orientation.Companion {
  }

  public static final class FoldingFeature.State {
    field public static final androidx.window.FoldingFeature.State.Companion Companion;
    field public static final androidx.window.FoldingFeature.State FLAT;
    field public static final androidx.window.FoldingFeature.State HALF_OPENED;
  }

  public static final class FoldingFeature.State.Companion {
  }

  public static final class FoldingFeature.Type {
    field public static final androidx.window.FoldingFeature.Type.Companion Companion;
    field public static final androidx.window.FoldingFeature.Type FOLD;
    field public static final androidx.window.FoldingFeature.Type HINGE;
  }

  public static final class FoldingFeature.Type.Companion {
  }

  public interface WindowBackend {
    method public void registerLayoutChangeCallback(android.app.Activity activity, java.util.concurrent.Executor executor, androidx.core.util.Consumer<androidx.window.WindowLayoutInfo> callback);
    method public void unregisterLayoutChangeCallback(androidx.core.util.Consumer<androidx.window.WindowLayoutInfo> callback);
  }

  public interface WindowInfoRepo {
    method public default static androidx.window.WindowInfoRepo create(android.app.Activity activity);
    method public kotlinx.coroutines.flow.Flow<androidx.window.WindowMetrics> getCurrentWindowMetrics();
    method public androidx.window.WindowMetrics getMaximumWindowMetrics();
    method public kotlinx.coroutines.flow.Flow<androidx.window.WindowLayoutInfo> getWindowLayoutInfo();
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public default static void overrideDecorator(androidx.window.WindowInfoRepoDecorator overridingDecorator);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public default static void reset();
    property public abstract kotlinx.coroutines.flow.Flow<androidx.window.WindowMetrics> currentWindowMetrics;
    property public abstract androidx.window.WindowMetrics maximumWindowMetrics;
    property public abstract kotlinx.coroutines.flow.Flow<androidx.window.WindowLayoutInfo> windowLayoutInfo;
    field public static final androidx.window.WindowInfoRepo.Companion Companion;
  }

  public static final class WindowInfoRepo.Companion {
    method public androidx.window.WindowInfoRepo create(android.app.Activity activity);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void overrideDecorator(androidx.window.WindowInfoRepoDecorator overridingDecorator);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void reset();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface WindowInfoRepoDecorator {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.window.WindowInfoRepo decorate(androidx.window.WindowInfoRepo repo);
  }

  public final class WindowLayoutInfo {
    method public java.util.List<androidx.window.DisplayFeature> getDisplayFeatures();
    property public final java.util.List<androidx.window.DisplayFeature> displayFeatures;
  }

  public static final class WindowLayoutInfo.Builder {
    ctor public WindowLayoutInfo.Builder();
    method public androidx.window.WindowLayoutInfo build();
    method public androidx.window.WindowLayoutInfo.Builder setDisplayFeatures(java.util.List<? extends androidx.window.DisplayFeature> displayFeatures);
  }

  public final class WindowManager {
    ctor public WindowManager(android.content.Context context, optional androidx.window.WindowBackend windowBackend);
    ctor public WindowManager(android.content.Context context);
    method public androidx.window.WindowMetrics getCurrentWindowMetrics();
    method public androidx.window.WindowMetrics getMaximumWindowMetrics();
    method public void registerLayoutChangeCallback(java.util.concurrent.Executor executor, androidx.core.util.Consumer<androidx.window.WindowLayoutInfo> callback);
    method public void unregisterLayoutChangeCallback(androidx.core.util.Consumer<androidx.window.WindowLayoutInfo> callback);
  }

  public final class WindowMetrics {
    ctor public WindowMetrics(android.graphics.Rect bounds);
    method public android.graphics.Rect getBounds();
    property public final android.graphics.Rect bounds;
  }

  public interface WindowMetricsCalculator {
    method public androidx.window.WindowMetrics computeCurrentWindowMetrics(android.app.Activity activity);
    method public androidx.window.WindowMetrics computeMaximumWindowMetrics(android.app.Activity activity);
    method public default static androidx.window.WindowMetricsCalculator create();
    field public static final androidx.window.WindowMetricsCalculator.Companion Companion;
  }

  public static final class WindowMetricsCalculator.Companion {
    method public androidx.window.WindowMetricsCalculator create();
  }

}

