// Signature format: 3.0
package androidx.navigation {

  @androidx.navigation.NavOptionsDsl public final class AnimBuilder {
    ctor public AnimBuilder();
    method public int getEnter();
    method public int getExit();
    method public int getPopEnter();
    method public int getPopExit();
    method public void setEnter(int p);
    method public void setExit(int p);
    method public void setPopEnter(int p);
    method public void setPopExit(int p);
    property public final int enter;
    property public final int exit;
    property public final int popEnter;
    property public final int popExit;
  }

  @androidx.navigation.NavDestinationDsl public final class NavActionBuilder {
    ctor public NavActionBuilder();
    method public int getDestinationId();
    method public void navOptions(kotlin.jvm.functions.Function1<? super androidx.navigation.NavOptionsBuilder,kotlin.Unit> optionsBuilder);
    method public void setDestinationId(int p);
    property public final int destinationId;
  }

  public final class NavArgsLazy<Args extends androidx.navigation.NavArgs> implements kotlin.Lazy<Args> {
    ctor public NavArgsLazy(kotlin.reflect.KClass<Args> navArgsClass, kotlin.jvm.functions.Function0<android.os.Bundle> argumentProducer);
    method public Args getValue();
    method public boolean isInitialized();
    property public Args value;
  }

  public final class NavArgsLazyKt {
  }

  @androidx.navigation.NavDestinationDsl public final class NavArgumentBuilder {
    ctor public NavArgumentBuilder();
    method public androidx.navigation.NavArgument build();
    method public Object? getDefaultValue();
    method public boolean getNullable();
    method public androidx.navigation.NavType<?> getType();
    method public void setDefaultValue(Object? value);
    method public void setNullable(boolean value);
    method public void setType(androidx.navigation.NavType<?> value);
    property public final Object? defaultValue;
    property public final boolean nullable;
    property public final androidx.navigation.NavType<?> type;
  }

  @androidx.navigation.NavDestinationDsl public class NavDestinationBuilder<D extends androidx.navigation.NavDestination> {
    ctor public NavDestinationBuilder(androidx.navigation.Navigator<? extends D> navigator, @IdRes int id);
    method public final void action(int actionId, kotlin.jvm.functions.Function1<? super androidx.navigation.NavActionBuilder,kotlin.Unit> actionBuilder);
    method public final void argument(String name, kotlin.jvm.functions.Function1<? super androidx.navigation.NavArgumentBuilder,kotlin.Unit> argumentBuilder);
    method public D build();
    method public final void deepLink(String uriPattern);
    method public final int getId();
    method public final CharSequence? getLabel();
    method protected final androidx.navigation.Navigator<? extends D> getNavigator();
    method public final void setLabel(CharSequence? p);
    property public final CharSequence? label;
  }

  @kotlin.DslMarker public @interface NavDestinationDsl {
  }

  @androidx.navigation.NavDestinationDsl public final class NavGraphBuilder extends androidx.navigation.NavDestinationBuilder<androidx.navigation.NavGraph> {
    ctor public NavGraphBuilder(androidx.navigation.NavigatorProvider provider, @IdRes int id, @IdRes int startDestination);
    method public void addDestination(androidx.navigation.NavDestination destination);
    method public androidx.navigation.NavGraph build();
    method public <D extends androidx.navigation.NavDestination> void destination(androidx.navigation.NavDestinationBuilder<? extends D> navDestination);
    method public androidx.navigation.NavigatorProvider getProvider();
    method public operator void unaryPlus(androidx.navigation.NavDestination);
  }

  public final class NavGraphBuilderKt {
    method public static inline androidx.navigation.NavGraph navigation(androidx.navigation.NavigatorProvider, @IdRes int id = 0, @IdRes int startDestination, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> builder);
    method public static inline void navigation(androidx.navigation.NavGraphBuilder, @IdRes int id, @IdRes int startDestination, kotlin.jvm.functions.Function1<? super androidx.navigation.NavGraphBuilder,kotlin.Unit> builder);
  }

  public final class NavGraphKt {
    method public static operator boolean contains(androidx.navigation.NavGraph, @IdRes int id);
    method public static inline operator androidx.navigation.NavDestination get(androidx.navigation.NavGraph, @IdRes int id);
    method public static inline operator void minusAssign(androidx.navigation.NavGraph, androidx.navigation.NavDestination node);
    method public static inline operator void plusAssign(androidx.navigation.NavGraph, androidx.navigation.NavDestination node);
    method public static inline operator void plusAssign(androidx.navigation.NavGraph, androidx.navigation.NavGraph other);
  }

  @androidx.navigation.NavOptionsDsl public final class NavOptionsBuilder {
    ctor public NavOptionsBuilder();
    method public void anim(kotlin.jvm.functions.Function1<? super androidx.navigation.AnimBuilder,kotlin.Unit> animBuilder);
    method public boolean getLaunchSingleTop();
    method public int getPopUpTo();
    method public void popUpTo(@IdRes int id, kotlin.jvm.functions.Function1<? super androidx.navigation.PopUpToBuilder,kotlin.Unit> popUpToBuilder);
    method public void setLaunchSingleTop(boolean p);
    method public void setPopUpTo(int value);
    property public final boolean launchSingleTop;
    property public final int popUpTo;
  }

  public final class NavOptionsBuilderKt {
    method public static androidx.navigation.NavOptions navOptions(kotlin.jvm.functions.Function1<? super androidx.navigation.NavOptionsBuilder,kotlin.Unit> optionsBuilder);
  }

  @kotlin.DslMarker public @interface NavOptionsDsl {
  }

  public final class NavigatorProviderKt {
    method public static inline operator <T extends androidx.navigation.Navigator<? extends androidx.navigation.NavDestination>> T get(androidx.navigation.NavigatorProvider, String name);
    method public static inline operator <T extends androidx.navigation.Navigator<? extends androidx.navigation.NavDestination>> T get(androidx.navigation.NavigatorProvider, kotlin.reflect.KClass<T> clazz);
    method public static inline operator void plusAssign(androidx.navigation.NavigatorProvider, androidx.navigation.Navigator<? extends androidx.navigation.NavDestination> navigator);
    method public static inline operator androidx.navigation.Navigator<? extends androidx.navigation.NavDestination>? set(androidx.navigation.NavigatorProvider, String name, androidx.navigation.Navigator<? extends androidx.navigation.NavDestination> navigator);
  }

  @androidx.navigation.NavOptionsDsl public final class PopUpToBuilder {
    ctor public PopUpToBuilder();
    method public boolean getInclusive();
    method public void setInclusive(boolean p);
    property public final boolean inclusive;
  }

}

