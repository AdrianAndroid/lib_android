// Signature format: 4.0
package androidx.wear.watchface.editor {

  public final class ChosenComplicationDataSource {
    ctor public ChosenComplicationDataSource(int complicationSlotId, androidx.wear.complications.ComplicationDataSourceInfo? complicationDataSourceInfo, android.os.Bundle extras);
    method public androidx.wear.complications.ComplicationDataSourceInfo? getComplicationDataSourceInfo();
    method public int getComplicationSlotId();
    method public android.os.Bundle getExtras();
    property public final androidx.wear.complications.ComplicationDataSourceInfo? complicationDataSourceInfo;
    property public final int complicationSlotId;
    property public final android.os.Bundle extras;
  }

  public final class EditorRequest {
    ctor @RequiresApi(android.os.Build.VERSION_CODES.R) public EditorRequest(android.content.ComponentName watchFaceComponentName, String editorPackageName, androidx.wear.watchface.style.UserStyleData? initialUserStyle, @RequiresApi androidx.wear.watchface.client.WatchFaceId watchFaceId, androidx.wear.watchface.client.DeviceConfig? headlessDeviceConfig, androidx.wear.watchface.editor.PreviewScreenshotParams? previewScreenshotParams);
    ctor public EditorRequest(android.content.ComponentName watchFaceComponentName, String editorPackageName, androidx.wear.watchface.style.UserStyleData? initialUserStyle);
    method @kotlin.jvm.Throws(exceptionClasses=TimeoutCancellationException::class) public static androidx.wear.watchface.editor.EditorRequest createFromIntent(android.content.Intent intent) throws kotlinx.coroutines.TimeoutCancellationException;
    method public String getEditorPackageName();
    method public androidx.wear.watchface.client.DeviceConfig? getHeadlessDeviceConfig();
    method public androidx.wear.watchface.style.UserStyleData? getInitialUserStyle();
    method public androidx.wear.watchface.editor.PreviewScreenshotParams? getPreviewScreenshotParams();
    method public android.content.ComponentName getWatchFaceComponentName();
    method @RequiresApi(android.os.Build.VERSION_CODES.R) public androidx.wear.watchface.client.WatchFaceId getWatchFaceId();
    property public final String editorPackageName;
    property public final androidx.wear.watchface.client.DeviceConfig? headlessDeviceConfig;
    property public final androidx.wear.watchface.style.UserStyleData? initialUserStyle;
    property public final androidx.wear.watchface.editor.PreviewScreenshotParams? previewScreenshotParams;
    property public final android.content.ComponentName watchFaceComponentName;
    property @RequiresApi(android.os.Build.VERSION_CODES.R) public final androidx.wear.watchface.client.WatchFaceId watchFaceId;
    field public static final androidx.wear.watchface.editor.EditorRequest.Companion Companion;
  }

  public static final class EditorRequest.Companion {
    method @kotlin.jvm.Throws(exceptionClasses=TimeoutCancellationException::class) public androidx.wear.watchface.editor.EditorRequest createFromIntent(android.content.Intent intent) throws kotlinx.coroutines.TimeoutCancellationException;
  }

  public abstract class EditorSession implements java.lang.AutoCloseable {
    ctor public EditorSession();
    method @RequiresApi(27) @UiThread public static final androidx.wear.watchface.editor.EditorSession createHeadlessEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, androidx.wear.watchface.client.HeadlessWatchFaceClient headlessWatchFaceClient);
    method @UiThread @kotlin.jvm.Throws(exceptionClasses=TimeoutCancellationException::class) public static final suspend Object? createOnWatchEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, kotlin.coroutines.Continuation<? super androidx.wear.watchface.editor.EditorSession> p) throws kotlinx.coroutines.TimeoutCancellationException;
    method public abstract Integer? getBackgroundComplicationSlotId();
    method @UiThread public abstract Integer? getComplicationSlotIdAt(@Px int x, @Px int y);
    method public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> getComplicationSlotsState();
    method @UiThread public abstract suspend Object? getComplicationsDataSourceInfo(kotlin.coroutines.Continuation<? super java.util.Map<java.lang.Integer,? extends androidx.wear.complications.ComplicationDataSourceInfo>> p);
    method @UiThread public abstract suspend Object? getComplicationsPreviewData(kotlin.coroutines.Continuation<? super java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>> p);
    method public abstract long getPreviewReferenceTimeMillis();
    method public abstract androidx.wear.watchface.style.UserStyle getUserStyle();
    method public abstract androidx.wear.watchface.style.UserStyleSchema getUserStyleSchema();
    method public abstract android.content.ComponentName getWatchFaceComponentName();
    method @RequiresApi(android.os.Build.VERSION_CODES.R) public abstract androidx.wear.watchface.client.WatchFaceId getWatchFaceId();
    method @UiThread public final boolean isCommitChangesOnClose();
    method @UiThread public abstract suspend Object? openComplicationDataSourceChooser(int complicationSlotId, kotlin.coroutines.Continuation<? super androidx.wear.watchface.editor.ChosenComplicationDataSource> p);
    method @UiThread public abstract android.graphics.Bitmap renderWatchFaceToBitmap(androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis, java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>? slotIdToComplicationData);
    method @UiThread public final void setCommitChangesOnClose(boolean commitChangesOnClose);
    method public abstract void setUserStyle(androidx.wear.watchface.style.UserStyle userStyle);
    property public abstract Integer? backgroundComplicationSlotId;
    property @UiThread public final boolean commitChangesOnClose;
    property public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> complicationSlotsState;
    property public abstract long previewReferenceTimeMillis;
    property public abstract androidx.wear.watchface.style.UserStyle userStyle;
    property public abstract androidx.wear.watchface.style.UserStyleSchema userStyleSchema;
    property public abstract android.content.ComponentName watchFaceComponentName;
    property @RequiresApi(android.os.Build.VERSION_CODES.R) public abstract androidx.wear.watchface.client.WatchFaceId watchFaceId;
    field public static final androidx.wear.watchface.editor.EditorSession.Companion Companion;
    field public static final long EDITING_SESSION_TIMEOUT_MILLIS = 4000L; // 0xfa0L
  }

  public static final class EditorSession.Companion {
    method @RequiresApi(27) @UiThread public androidx.wear.watchface.editor.EditorSession createHeadlessEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, androidx.wear.watchface.client.HeadlessWatchFaceClient headlessWatchFaceClient);
    method @UiThread @kotlin.jvm.Throws(exceptionClasses=TimeoutCancellationException::class) public suspend Object? createOnWatchEditingSession(androidx.activity.ComponentActivity activity, android.content.Intent editIntent, kotlin.coroutines.Continuation<? super androidx.wear.watchface.editor.EditorSession> p) throws kotlinx.coroutines.TimeoutCancellationException;
  }

  public final class EditorSessionKt {
  }

  public final class PreviewScreenshotParams {
    ctor public PreviewScreenshotParams(androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis);
    method public long getCalendarTimeMillis();
    method public androidx.wear.watchface.RenderParameters getRenderParameters();
    property public final long calendarTimeMillis;
    property public final androidx.wear.watchface.RenderParameters renderParameters;
  }

  public class WatchFaceEditorContract extends androidx.activity.result.contract.ActivityResultContract<androidx.wear.watchface.editor.EditorRequest,kotlin.Unit> {
    ctor public WatchFaceEditorContract();
    method public android.content.Intent createIntent(android.content.Context context, androidx.wear.watchface.editor.EditorRequest input);
    method public void parseResult(int resultCode, android.content.Intent? intent);
    field public static final String ACTION_WATCH_FACE_EDITOR = "androidx.wear.watchface.editor.action.WATCH_FACE_EDITOR";
    field public static final androidx.wear.watchface.editor.WatchFaceEditorContract.Companion Companion;
  }

  public static final class WatchFaceEditorContract.Companion {
  }

  public final class WatchFaceEditorContractKt {
  }

}

