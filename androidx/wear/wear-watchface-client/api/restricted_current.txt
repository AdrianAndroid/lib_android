// Signature format: 4.0
package androidx.wear.watchface.client {

  public final class ComplicationSlotState {
    ctor public ComplicationSlotState(android.graphics.Rect bounds, @androidx.wear.watchface.data.ComplicationSlotBoundsType int boundsType, java.util.List<? extends androidx.wear.complications.data.ComplicationType> supportedTypes, androidx.wear.complications.DefaultComplicationDataSourcePolicy defaultDataSourcePolicy, androidx.wear.complications.data.ComplicationType defaultDataSourceType, boolean isEnabled, boolean isInitiallyEnabled, androidx.wear.complications.data.ComplicationType currentType, boolean fixedComplicationDataSource, android.os.Bundle complicationConfigExtras);
    ctor @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public ComplicationSlotState(androidx.wear.watchface.data.ComplicationStateWireFormat complicationStateWireFormat);
    method public android.graphics.Rect getBounds();
    method public int getBoundsType();
    method public android.os.Bundle getComplicationConfigExtras();
    method public androidx.wear.complications.data.ComplicationType getCurrentType();
    method public androidx.wear.complications.DefaultComplicationDataSourcePolicy getDefaultDataSourcePolicy();
    method public androidx.wear.complications.data.ComplicationType getDefaultDataSourceType();
    method public boolean getFixedComplicationDataSource();
    method public java.util.List<androidx.wear.complications.data.ComplicationType> getSupportedTypes();
    method public boolean isEnabled();
    method public boolean isInitiallyEnabled();
    property public final android.graphics.Rect bounds;
    property public final int boundsType;
    property public final android.os.Bundle complicationConfigExtras;
    property public final androidx.wear.complications.data.ComplicationType currentType;
    property public final androidx.wear.complications.DefaultComplicationDataSourcePolicy defaultDataSourcePolicy;
    property public final androidx.wear.complications.data.ComplicationType defaultDataSourceType;
    property public final boolean fixedComplicationDataSource;
    property public final boolean isEnabled;
    property public final boolean isInitiallyEnabled;
    property public final java.util.List<androidx.wear.complications.data.ComplicationType> supportedTypes;
  }

  public final class DefaultComplicationDataSourcePolicyAndType {
    ctor public DefaultComplicationDataSourcePolicyAndType(androidx.wear.complications.DefaultComplicationDataSourcePolicy policy, androidx.wear.complications.data.ComplicationType type);
    method public androidx.wear.complications.DefaultComplicationDataSourcePolicy getPolicy();
    method public androidx.wear.complications.data.ComplicationType getType();
    property public final androidx.wear.complications.DefaultComplicationDataSourcePolicy policy;
    property public final androidx.wear.complications.data.ComplicationType type;
  }

  public final class DeviceConfig {
    ctor public DeviceConfig(boolean hasLowBitAmbient, boolean hasBurnInProtection, long analogPreviewReferenceTimeMillis, long digitalPreviewReferenceTimeMillis);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.wear.watchface.data.DeviceConfig asWireDeviceConfig();
    method public long getAnalogPreviewReferenceTimeMillis();
    method public long getDigitalPreviewReferenceTimeMillis();
    method public boolean getHasBurnInProtection();
    method public boolean getHasLowBitAmbient();
    property public final long analogPreviewReferenceTimeMillis;
    property public final long digitalPreviewReferenceTimeMillis;
    property public final boolean hasBurnInProtection;
    property public final boolean hasLowBitAmbient;
  }

  public final class DeviceConfigKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.wear.watchface.client.DeviceConfig asApiDeviceConfig(androidx.wear.watchface.data.DeviceConfig);
  }

  public interface EditorListener {
    method public void onEditorStateChanged(androidx.wear.watchface.client.EditorState editorState);
  }

  public interface EditorServiceClient {
    method public void addListener(androidx.wear.watchface.client.EditorListener editorListener, java.util.concurrent.Executor listenerExecutor);
    method public void closeEditor();
    method public void removeListener(androidx.wear.watchface.client.EditorListener editorListener);
  }

  public final class EditorState {
    method public java.util.Map<java.lang.Integer,androidx.wear.complications.data.ComplicationData> getPreviewComplicationsData();
    method public android.graphics.Bitmap? getPreviewImage();
    method public boolean getShouldCommitChanges();
    method public androidx.wear.watchface.style.UserStyleData getUserStyle();
    method public androidx.wear.watchface.client.WatchFaceId getWatchFaceId();
    property public final java.util.Map<java.lang.Integer,androidx.wear.complications.data.ComplicationData> previewComplicationsData;
    property public final android.graphics.Bitmap? previewImage;
    property public final boolean shouldCommitChanges;
    property public final androidx.wear.watchface.style.UserStyleData userStyle;
    property public final androidx.wear.watchface.client.WatchFaceId watchFaceId;
  }

  public final class EditorStateKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.wear.watchface.client.EditorState asApiEditorState(androidx.wear.watchface.editor.data.EditorStateWireFormat);
  }

  public interface HeadlessWatchFaceClient extends java.lang.AutoCloseable {
    method @AnyThread public void addClientDisconnectListener(androidx.wear.watchface.client.HeadlessWatchFaceClient.ClientDisconnectListener listener, java.util.concurrent.Executor executor);
    method public default static androidx.wear.watchface.client.HeadlessWatchFaceClient createFromBundle(android.os.Bundle bundle);
    method public java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> getComplicationSlotsState();
    method public long getPreviewReferenceTimeMillis();
    method public androidx.wear.watchface.style.UserStyleSchema getUserStyleSchema();
    method @AnyThread public boolean isConnectionAlive();
    method @AnyThread public void removeClientDisconnectListener(androidx.wear.watchface.client.HeadlessWatchFaceClient.ClientDisconnectListener listener);
    method @RequiresApi(27) public android.graphics.Bitmap? renderComplicationToBitmap(int complicationSlotId, androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis, androidx.wear.complications.data.ComplicationData complicationData, androidx.wear.watchface.style.UserStyle? userStyle);
    method @RequiresApi(27) public android.graphics.Bitmap renderWatchFaceToBitmap(androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis, androidx.wear.watchface.style.UserStyle? userStyle, java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>? slotIdToComplicationData);
    method public android.os.Bundle toBundle();
    property public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> complicationSlotsState;
    property public abstract long previewReferenceTimeMillis;
    property public abstract androidx.wear.watchface.style.UserStyleSchema userStyleSchema;
    field public static final String BINDER_KEY = "HeadlessWatchFaceClient";
    field public static final androidx.wear.watchface.client.HeadlessWatchFaceClient.Companion Companion;
  }

  public static interface HeadlessWatchFaceClient.ClientDisconnectListener {
    method public void onClientDisconnected();
  }

  public static final class HeadlessWatchFaceClient.Companion {
    method public androidx.wear.watchface.client.HeadlessWatchFaceClient createFromBundle(android.os.Bundle bundle);
  }

  public interface InteractiveWatchFaceClient extends java.lang.AutoCloseable {
    method @AnyThread public void addClientDisconnectListener(androidx.wear.watchface.client.InteractiveWatchFaceClient.ClientDisconnectListener listener, java.util.concurrent.Executor executor);
    method public void displayPressedAnimation(int complicationSlotId);
    method public default Integer? getComplicationIdAt(@Px int x, @Px int y);
    method public java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> getComplicationSlotsState();
    method public java.util.List<androidx.wear.watchface.ContentDescriptionLabel> getContentDescriptionLabels();
    method public String getInstanceId();
    method public long getPreviewReferenceTimeMillis();
    method public androidx.wear.watchface.style.UserStyleSchema getUserStyleSchema();
    method @AnyThread public boolean isConnectionAlive();
    method public void performAmbientTick();
    method @AnyThread public void removeClientDisconnectListener(androidx.wear.watchface.client.InteractiveWatchFaceClient.ClientDisconnectListener listener);
    method @RequiresApi(27) public android.graphics.Bitmap renderWatchFaceToBitmap(androidx.wear.watchface.RenderParameters renderParameters, long calendarTimeMillis, androidx.wear.watchface.style.UserStyle? userStyle, java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>? idAndComplicationData);
    method public void sendTouchEvent(@Px int xPosition, @Px int yPosition, @androidx.wear.watchface.TapType int tapType);
    method public void setWatchUiState(androidx.wear.watchface.client.WatchUiState watchUiState);
    method public void updateComplicationData(java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData> slotIdToComplicationData);
    method public void updateWatchFaceInstance(String newInstanceId, androidx.wear.watchface.style.UserStyle userStyle);
    method public void updateWatchFaceInstance(String newInstanceId, androidx.wear.watchface.style.UserStyleData userStyle);
    property public abstract java.util.Map<java.lang.Integer,androidx.wear.watchface.client.ComplicationSlotState> complicationSlotsState;
    property public abstract java.util.List<androidx.wear.watchface.ContentDescriptionLabel> contentDescriptionLabels;
    property public abstract String instanceId;
    property public abstract long previewReferenceTimeMillis;
    property public abstract androidx.wear.watchface.style.UserStyleSchema userStyleSchema;
    field public static final androidx.wear.watchface.client.InteractiveWatchFaceClient.Companion Companion;
    field public static final int TAP_TYPE_CANCEL = 1; // 0x1
    field public static final int TAP_TYPE_DOWN = 0; // 0x0
    field public static final int TAP_TYPE_UP = 2; // 0x2
  }

  public static interface InteractiveWatchFaceClient.ClientDisconnectListener {
    method public void onClientDisconnected();
  }

  public static final class InteractiveWatchFaceClient.Companion {
    field public static final int TAP_TYPE_CANCEL = 1; // 0x1
    field public static final int TAP_TYPE_DOWN = 0; // 0x0
    field public static final int TAP_TYPE_UP = 2; // 0x2
  }

  public interface WatchFaceControlClient extends java.lang.AutoCloseable {
    method public androidx.wear.watchface.client.HeadlessWatchFaceClient? createHeadlessWatchFaceClient(android.content.ComponentName watchFaceName, androidx.wear.watchface.client.DeviceConfig deviceConfig, @Px int surfaceWidth, @Px int surfaceHeight);
    method public default static suspend Object? createWatchFaceControlClient(android.content.Context context, String watchFacePackageName, kotlin.coroutines.Continuation<? super androidx.wear.watchface.client.WatchFaceControlClient> p);
    method public java.util.Map<java.lang.Integer,androidx.wear.watchface.client.DefaultComplicationDataSourcePolicyAndType> getDefaultComplicationDataSourcePoliciesAndType(android.content.ComponentName watchFaceName);
    method public androidx.wear.watchface.client.EditorServiceClient getEditorServiceClient();
    method public androidx.wear.watchface.client.InteractiveWatchFaceClient? getInteractiveWatchFaceClientInstance(String instanceId);
    method public suspend Object? getOrCreateInteractiveWatchFaceClient(String id, androidx.wear.watchface.client.DeviceConfig deviceConfig, androidx.wear.watchface.client.WatchUiState watchUiState, androidx.wear.watchface.style.UserStyleData? userStyle, java.util.Map<java.lang.Integer,? extends androidx.wear.complications.data.ComplicationData>? slotIdToComplicationData, kotlin.coroutines.Continuation<? super androidx.wear.watchface.client.InteractiveWatchFaceClient> p);
    field public static final androidx.wear.watchface.client.WatchFaceControlClient.Companion Companion;
  }

  public static final class WatchFaceControlClient.Companion {
    method public suspend Object? createWatchFaceControlClient(android.content.Context context, String watchFacePackageName, kotlin.coroutines.Continuation<? super androidx.wear.watchface.client.WatchFaceControlClient> p);
  }

  public static final class WatchFaceControlClient.ServiceNotBoundException extends java.lang.Exception {
    ctor public WatchFaceControlClient.ServiceNotBoundException();
  }

  public static final class WatchFaceControlClient.ServiceStartFailureException extends java.lang.Exception {
    ctor public WatchFaceControlClient.ServiceStartFailureException(optional String message);
  }

  public final class WatchFaceId {
    ctor public WatchFaceId(String id);
    method public String getId();
    property public final String id;
  }

  public final class WatchUiState {
    ctor public WatchUiState(boolean inAmbientMode, int interruptionFilter);
    method public boolean getInAmbientMode();
    method public int getInterruptionFilter();
    property public final boolean inAmbientMode;
    property public final int interruptionFilter;
  }

}

